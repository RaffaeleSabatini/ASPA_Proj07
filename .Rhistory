install.packages("StanHeaders", type = "source")
install.packages("rstan", type = "source")
q()
install.packages("patchwork")
q()
remove.packages(c("rstan", "StanHeaders"))
installed.packages()[, "Package"]
q()
install.packages("rstan", dependencies = TRUE)
library(rstan)
install.packages("rstan", dependencies = TRUE)
install.packages("StanHeaders", dependencies = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
q()
remove.packages(c("rstan", "StanHeaders"))
install.packages("rstan", type = "source")
library(rstan)
q()
sessionInfo()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
cat("CXX17FLAGS += -O3 -mtune=native -arch arm64 -ftemplate-depth-256\n",
    file = M, sep = "\n", append = FALSE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
M <- file.path(dotR, "Makevars")
cat("CXX17FLAGS += -O3 -arch arm64 -ftemplate-depth-256\n",
    file = M, sep = "\n", append = FALSE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
q()
dotR <- file.path(Sys.getenv("HOME"), ".R")
M <- file.path(dotR, "Makevars")
cat(
  "CC=clang\n",
  "CXX=clang++\n",
  "CXX11=clang++\n",
  "CXX14=clang++\n",
  "CXX17=clang++\n",
  "CFLAGS += -O3 -arch arm64\n",
  "CXXFLAGS += -O3 -arch arm64\n",
  "CXX17FLAGS += -O3 -arch arm64 -ftemplate-depth-256\n",
  "FC = /opt/homebrew/bin/gfortran\n",
  "F77 = /opt/homebrew/bin/gfortran\n",
  "FFLAGS += -O3 -arch arm64\n",
  file = M, sep = ""
)
dotR <- file.path(Sys.getenv("HOME"), ".R")
M <- file.path(dotR, "Makevars")
cat(
  "CC=clang\n",
  "CXX=clang++\n",
  "CXX11=clang++\n",
  "CXX14=clang++\n",
  "CXX17=clang++\n",
  "CFLAGS += -O3 -arch arm64\n",
  "CXXFLAGS += -O3 -arch arm64\n",
  "CXX11FLAGS += -O3 -arch arm64\n",
  "CXX14FLAGS += -O3 -arch arm64\n",
  "CXX17FLAGS += -O3 -arch arm64 -ftemplate-depth-256\n",
  "FC = /opt/homebrew/bin/gfortran\n",
  "F77 = /opt/homebrew/bin/gfortran\n",
  "FFLAGS += -O3 -arch arm64\n",
  "FCFLAGS += -O3 -arch arm64\n",
  file = M, sep = ""
)
q()
system("R CMD SHLIB foo.c")
q()
dyn.load("foo.so")
.Call("hello")
dotR <- file.path(Sys.getenv("HOME"), ".R")
M <- file.path(dotR, "Makevars")
cat(
  "CC=clang\n",
  "CXX=clang++\n",
  "CXX11=clang++\n",
  "CXX14=clang++\n",
  "CXX17=clang++\n",
  "CFLAGS = -O3 -arch arm64\n",
  "CXXFLAGS = -O3 -arch arm64\n",
  "CXX11FLAGS = -O3 -arch arm64\n",
  "CXX14FLAGS = -O3 -arch arm64\n",
  "CXX17FLAGS = -O3 -arch arm64 -ftemplate-depth-256\n",
  "F77 = /opt/homebrew/bin/gfortran\n",
  "FC = /opt/homebrew/bin/gfortran\n",
  "FFLAGS = -O3 -arch arm64\n",
  "FCFLAGS = -O3 -arch arm64\n",
  file = M, sep = ""
)
q()
remove.packages("rstan")
remove.packages("StanHeaders")
library(rstan)        # deve dare errore "there is no package"
library(StanHeaders)  # deve dare errore
library(StanHeaders)
install.packages("StanHeaders", repos = "https://cloud.r-project.org/")
install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
q()
install.packages("dplyr")
q()
install.packages("bayesplot")
q()
install.packages("patchwork")
q()
# --- 1️⃣ Percorso del Makevars ---
makevars_dir <- file.path(Sys.getenv("HOME"), ".R")
makevars_file <- file.path(makevars_dir, "Makevars")
# --- 2️⃣ Crea cartella ~/.R se non esiste ---
if (!dir.exists(makevars_dir)) {
  dir.create(makevars_dir)
  message("📁 Created folder: ", makevars_dir)
}
# --- 3️⃣ Contenuto Makevars con clang nativo Apple ---
makevars_content <- "
CC=/usr/bin/clang
CXX=/usr/bin/clang++
CXX11=/usr/bin/clang++
CXX14=/usr/bin/clang++
CXX17=/usr/bin/clang++
CXX20=/usr/bin/clang++
CFLAGS=-O3
CXXFLAGS=-O3
LDFLAGS=
"
# --- 4️⃣ Scrive il file Makevars ---
writeLines(makevars_content, makevars_file)
message("✅ ~/.R/Makevars updated to use Apple native clang!")
# --- 5️⃣ Mostra il contenuto ---
cat("📄 Current ~/.R/Makevars content:\n")
cat(readLines(makevars_file), sep = "\n")
Sys.getenv("CC")
Sys.getenv("CXX")
q()
install.packages("IRkernel")
library(IRkernel)
IRkernel::installspec(name = "ir_forstan", displayname = "R (for Stan)")
q()
# --- Lista dei pacchetti da installare ---
packages <- c(
  "dplyr",
  "repr",
  "rstan",
  "bayesplot",
  "ggplot2",
  "patchwork"
)
# --- Funzione per installare i pacchetti mancanti ---
install_if_missing <- function(pkg) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    install.packages(pkg, dependencies = TRUE)
  }
}
# --- Installazione dei pacchetti ---
sapply(packages, install_if_missing)
# --- Caricamento dei pacchetti ---
invisible(lapply(packages, library, character.only = TRUE))
# --- Opzioni consigliate per RStan ---
if ("rstan" %in% installed.packages()[, "Package"]) {
  library(rstan)
  rstan_options(auto_write = TRUE)
  options(mc.cores = parallel::detectCores())
}
# --- Messaggio finale ---
cat("✅ Tutti i pacchetti richiesti sono installati e caricati!\n")
q()
R.version$arch        # Deve restituire 'arm64'
system("clang -v")    # Deve usare Apple clang nativo
q()
library(IRkernel)
# Crea un kernel nuovo chiamato "R (Fresh)"
IRkernel::installspec(name = "ir_fresh", displayname = "R (Fresh)")
q()
install.packages("Rcpp", type = "source")
install.packages("rstan", type = "source", dependencies = TRUE)
q()
R.version$arch
R.version.string
R.home()
R.version$arch       # deve restituire 'arm64' su Apple Silicon
R.home()             # deve restituire "/Library/Frameworks/R.framework/Resources"
R.version.string  
q()
remove.packages("Rcpp")
remove.packages("rstan")
install.packages("Rcpp", type = "source")
install.packages("rstan", type = "source")
Sys.getenv("R_HOME")
R.version$arch
cat ~/.R/Makevars
q()
install.packages("Rcpp", type = "source")
install.packages("rstan", type = "source")
q()
Sys.setenv(PATH = paste("/opt/homebrew/opt/llvm/bin", Sys.getenv("PATH"), sep=":"))
Sys.setenv(CC = "clang")
Sys.setenv(CXX = "clang++")
Sys.setenv(CXXFLAGS = "-O3 -mtune=native -arch arm64")
unlink(tempdir(), recursive = TRUE)
rstan_options(auto_write = FALSE)
library(Rcpp)
cppFunction('int add(int x, int y) { return x + y; }')
add(2, 3)  # dovrebbe restituire 5
q()
install.packages("patchwork")
q()
